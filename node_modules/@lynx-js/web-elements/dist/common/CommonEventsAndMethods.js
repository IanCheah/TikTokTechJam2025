// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
import { __esDecorate, __runInitializers } from "tslib";
import { commonComponentEventSetting } from './commonEventInitConfiguration.js';
import { registerEventEnableStatusChangeHandler } from '@lynx-js/web-elements-reactive';
export const layoutChangeTarget = Symbol('layoutChangeTarget');
let CommonEventsAndMethods = (() => {
    let ___handleScrollUpperThresholdEventEnabled_decorators;
    let ___handleScrollUpperThresholdEventEnabled_initializers = [];
    let ___handleScrollUpperThresholdEventEnabled_extraInitializers = [];
    return class CommonEventsAndMethods {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            ___handleScrollUpperThresholdEventEnabled_decorators = [registerEventEnableStatusChangeHandler('layoutchange')];
            __esDecorate(null, null, ___handleScrollUpperThresholdEventEnabled_decorators, { kind: "field", name: "__handleScrollUpperThresholdEventEnabled", static: false, private: false, access: { has: obj => "__handleScrollUpperThresholdEventEnabled" in obj, get: obj => obj.__handleScrollUpperThresholdEventEnabled, set: (obj, value) => { obj.__handleScrollUpperThresholdEventEnabled = value; } }, metadata: _metadata }, ___handleScrollUpperThresholdEventEnabled_initializers, ___handleScrollUpperThresholdEventEnabled_extraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static observedAttributes = [];
        #dom;
        constructor(currentElement) {
            __runInitializers(this, ___handleScrollUpperThresholdEventEnabled_extraInitializers);
            this.#dom = currentElement;
        }
        #resizeObserving = false;
        #resizeObserver;
        __handleScrollUpperThresholdEventEnabled = __runInitializers(this, ___handleScrollUpperThresholdEventEnabled_initializers, (enabled) => {
            if (enabled && this.#dom[layoutChangeTarget]) {
                if (!this.#resizeObserver) {
                    this.#resizeObserver = new ResizeObserver(([entry]) => {
                        if (entry) {
                            // The layoutchange event is the border box of the element
                            const { width, height, left, right, top, bottom } = entry.contentRect;
                            const id = this.#dom.id;
                            this.#dom.dispatchEvent(new CustomEvent('layoutchange', {
                                detail: {
                                    width,
                                    height,
                                    left,
                                    right,
                                    top,
                                    bottom,
                                    id,
                                },
                                ...commonComponentEventSetting,
                            }));
                        }
                    });
                    if (!this.#resizeObserving) {
                        this.#resizeObserver.observe(this.#dom[layoutChangeTarget]);
                        this.#resizeObserving = true;
                    }
                }
            }
            else {
                this.#resizeObserver?.disconnect();
            }
        });
        #disableExposure() {
            this.#resizeObserver?.disconnect();
        }
    };
})();
export { CommonEventsAndMethods };
//# sourceMappingURL=CommonEventsAndMethods.js.map