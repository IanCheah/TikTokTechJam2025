import { __esDecorate, __runInitializers } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { CommonEventsAndMethods } from '../common/CommonEventsAndMethods.js';
import { FadeEdgeLengthAttribute } from './FadeEdgeLengthAttribute.js';
import { ScrollAttributes } from './ScrollAttributes.js';
import { ScrollViewEvents } from './ScrollViewEvents.js';
import { ScrollIntoView } from './ScrollIntoView.js';
import { Component } from '@lynx-js/web-elements-reactive';
import { scrollContainerDom } from '../common/constants.js';
import { templateScrollView } from '@lynx-js/web-elements-template';
let ScrollView = (() => {
    let _classDecorators = [Component('scroll-view', [
            CommonEventsAndMethods,
            ScrollAttributes,
            FadeEdgeLengthAttribute,
            ScrollViewEvents,
            ScrollIntoView,
        ], templateScrollView)];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = HTMLElement;
    var ScrollView = class extends _classSuper {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            ScrollView = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static notToFilterFalseAttributes = new Set(['enable-scroll']);
        static scrollInterval = 100;
        #autoScrollTimer;
        scrollTo(...args) {
            let offset;
            if (typeof args[0].offset === 'string') {
                const offsetValue = parseFloat(args[0].offset);
                offset = { left: offsetValue, top: offsetValue };
            }
            else if (typeof args[0].offset === 'number') {
                offset = { left: args[0].offset, top: args[0].offset };
            }
            if (typeof args[0].index === 'number') {
                const index = args[0].index;
                if (index === 0) {
                    this.scrollTop = 0;
                    this.scrollLeft = 0;
                }
                else if (index > 0 && index < this.childElementCount) {
                    const targetKid = this.children.item(index);
                    if (targetKid instanceof HTMLElement) {
                        if (offset) {
                            offset = {
                                left: targetKid.offsetLeft + offset.left,
                                top: targetKid.offsetTop + offset.top,
                            };
                        }
                        else {
                            offset = { left: targetKid.offsetLeft, top: targetKid.offsetTop };
                        }
                    }
                }
            }
            if (offset) {
                this.scrollTo({
                    ...offset,
                    behavior: args[0].smooth ? 'smooth' : 'auto',
                });
            }
            else {
                super.scrollTo(...args);
            }
        }
        autoScroll(options) {
            clearInterval(this.#autoScrollTimer);
            if (options.start) {
                const rate = typeof options.rate === 'number'
                    ? options.rate
                    : parseFloat(options.rate);
                const tickDistance = (rate * ScrollView.scrollInterval) / 1000;
                this.#autoScrollTimer = setInterval((dom) => {
                    dom.scrollBy({
                        left: tickDistance,
                        top: tickDistance,
                        behavior: 'smooth',
                    });
                }, ScrollView.scrollInterval, this);
            }
        }
        get [scrollContainerDom]() {
            return this;
        }
        static {
            __runInitializers(_classThis, _classExtraInitializers);
        }
    };
    return ScrollView = _classThis;
})();
export { ScrollView };
//# sourceMappingURL=ScrollView.js.map