import { __esDecorate, __runInitializers } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { Component } from '@lynx-js/web-elements-reactive';
import { CommonEventsAndMethods } from '../common/CommonEventsAndMethods.js';
import { XFoldviewNgEvents } from './XFoldviewNgEvents.js';
import { scrollContainerDom } from '../common/constants.js';
export const scrollableLength = Symbol('scrollableLength');
export const isHeaderShowing = Symbol('isHeaderShowing');
export const resizeObserver = Symbol('resizeObserver');
export const slotKid = Symbol('slotKid');
let XFoldviewNg = (() => {
    let _classDecorators = [Component('x-foldview-ng', [
            CommonEventsAndMethods,
            XFoldviewNgEvents,
        ])];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = HTMLElement;
    var XFoldviewNg = class extends _classSuper {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            XFoldviewNg = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static notToFilterFalseAttributes = new Set(['scroll-enable']);
        [slotKid];
        [resizeObserver] = new ResizeObserver((resizeEntries) => {
            for (const resize of resizeEntries) {
                if (resize.target.tagName === 'X-FOLDVIEW-HEADER-NG') {
                    this.#headerHeight = resize.contentRect.height;
                }
                else if (resize.target.tagName === 'X-FOLDVIEW-TOOLBAR-NG') {
                    this.#toolbarHeight = resize.contentRect.height;
                }
            }
            if (this[slotKid]) {
                this[slotKid].style.top = `${this.#headerHeight - this.#toolbarHeight}px`;
            }
        });
        #headerHeight = 0;
        #toolbarHeight = 0;
        get [scrollableLength]() {
            return this.#headerHeight - this.#toolbarHeight;
        }
        get [isHeaderShowing]() {
            // This behavior cannot be reproduced in the current test, but can be reproduced in Android WebView
            return this[scrollableLength] - this.scrollTop >= 1;
        }
        get scrollTop() {
            return super.scrollTop;
        }
        set scrollTop(value) {
            if (value > this[scrollableLength]) {
                value = this[scrollableLength];
            }
            else if (value < 0) {
                value = 0;
            }
            super.scrollTop = value;
        }
        setFoldExpanded(params) {
            const { offset, smooth = true } = params;
            const offsetValue = parseFloat(offset);
            this.scrollTo({
                top: offsetValue,
                behavior: smooth ? 'smooth' : 'instant',
            });
        }
        get [scrollContainerDom]() {
            return this;
        }
        disconnectedCallback() {
            this[resizeObserver]?.disconnect();
            this[resizeObserver] = undefined;
        }
        static {
            __runInitializers(_classThis, _classExtraInitializers);
        }
    };
    return XFoldviewNg = _classThis;
})();
export { XFoldviewNg };
//# sourceMappingURL=XFoldviewNg.js.map