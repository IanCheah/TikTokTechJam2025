import { isHeaderShowing } from './XFoldviewNg.js';
import { isChromium } from '../common/constants.js';
export class XFoldviewSlotNgTouchEventsHandler {
    #parentScrollTop = 0;
    #childrenElemsntsScrollTop = new WeakMap();
    #elements;
    #previousPageY = 0;
    #previousPageX = 0;
    #scrollingVertically = null;
    #currentScrollingElement;
    #deltaY = 0;
    #dom;
    static observedAttributes = [];
    constructor(dom) {
        this.#dom = dom;
        this.#dom.addEventListener('touchmove', this.#scroller, {
            passive: false,
        });
        this.#dom.addEventListener('touchstart', this.#touchStart, {
            passive: true,
        });
        this.#dom.addEventListener('touchend', this.#touchEnd, {
            passive: true,
        });
    }
    #getTheMostScrollableKid(delta) {
        const scrollableKid = this.#elements?.find((element) => {
            if (element.scrollHeight > element.clientHeight) {
                const couldScrollNear = delta < 0
                    && element.scrollTop !== 0;
                const couldScrollFar = delta > 0
                    && Math.abs(element.scrollHeight - element.clientHeight
                        - element.scrollTop) > 1;
                return couldScrollNear || couldScrollFar;
            }
            return false;
        });
        return scrollableKid;
    }
    #scrollKid(scrollableKid, delta) {
        let targetKidScrollDistance = this.#childrenElemsntsScrollTop.get(scrollableKid) ?? 0;
        targetKidScrollDistance += delta;
        this.#childrenElemsntsScrollTop.set(scrollableKid, targetKidScrollDistance);
        scrollableKid.scrollTop = targetKidScrollDistance;
    }
    #scroller = (event) => {
        const parentElement = this.#getParentElement();
        const touch = event.touches.item(0);
        const { pageY, pageX } = touch;
        const deltaY = this.#previousPageY - pageY;
        if (this.#scrollingVertically === null) {
            const deltaX = this.#previousPageX - pageX;
            this.#scrollingVertically = Math.abs(deltaY) > Math.abs(deltaX);
        }
        if (this.#scrollingVertically === false) {
            return;
        }
        const scrollableKidY = this.#getTheMostScrollableKid(deltaY);
        if (parentElement) {
            if (event.cancelable) {
                event.preventDefault();
            }
            if ((parentElement[isHeaderShowing] && deltaY > 0
                || (deltaY < 0 && !scrollableKidY))
                // deltaY > 0: swipe up (folding header)
                // scroll the foldview if its scrollable
                || (!parentElement[isHeaderShowing] && !scrollableKidY)
            // all sub doms are scrolled
            ) {
                parentElement.scrollBy({
                    top: deltaY,
                    behavior: 'smooth',
                });
                this.#parentScrollTop += deltaY;
                parentElement.scrollTop = this.#parentScrollTop;
                this.#currentScrollingElement = parentElement;
            }
            else if (scrollableKidY) {
                this.#currentScrollingElement = scrollableKidY;
                this.#scrollKid(scrollableKidY, deltaY);
            }
        }
        this.#previousPageY = pageY;
        this.#deltaY = deltaY;
    };
    #getParentElement() {
        const parentElement = this.#dom.parentElement;
        if (parentElement && parentElement.tagName === 'X-FOLDVIEW-NG') {
            return parentElement;
        }
    }
    #touchStart = (event) => {
        const { pageX, pageY } = event.touches.item(0);
        this.#elements = document.elementsFromPoint(pageX, pageY).filter(e => this.#dom.contains(e));
        this.#previousPageY = pageY;
        this.#previousPageX = pageX;
        this.#parentScrollTop = this.#getParentElement()?.scrollTop ?? 0;
        for (const element of this.#elements) {
            this.#childrenElemsntsScrollTop.set(element, element.scrollTop);
        }
        this.#scrollingVertically = null;
        this.#currentScrollingElement = undefined;
    };
    #touchEnd = () => {
        this.#scrollingVertically = null;
        if (this.#currentScrollingElement) {
            const parentElement = this.#getParentElement();
            if (this.#currentScrollingElement === parentElement
                && !parentElement[isHeaderShowing]) {
                return;
            }
            this.#currentScrollingElement.scrollBy({
                top: this.#deltaY * 4,
                behavior: 'smooth',
            });
        }
    };
}
//# sourceMappingURL=XFoldviewSlotNgTouchEventsHandler.js.map