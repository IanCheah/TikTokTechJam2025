import { __esDecorate, __runInitializers } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { Component, genDomGetter } from '@lynx-js/web-elements-reactive';
import { XRefreshViewEventsEmitter } from './XRefreshViewEventsEmitter.js';
import { CommonEventsAndMethods } from '../common/CommonEventsAndMethods.js';
import { scrollContainerDom } from '../common/constants.js';
import { templateXRefreshView } from '@lynx-js/web-elements-template';
let XRefreshView = (() => {
    let _classDecorators = [Component('x-refresh-view', [CommonEventsAndMethods, XRefreshViewEventsEmitter], templateXRefreshView)];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = HTMLElement;
    var XRefreshView = class extends _classSuper {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            XRefreshView = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static notToFilterFalseAttributes = new Set([
            'enable-refresh',
            'enable-loadmore',
            'enable-auto-loadmore',
        ]);
        _nextRefreshIsManual = true;
        finishRefresh() {
            this.querySelector('x-refresh-view > x-refresh-header:first-of-type')?.removeAttribute('x-magnet-enable');
        }
        finishLoadMore() {
            this.querySelector('x-refresh-view > x-refresh-footer:first-of-type')?.removeAttribute('x-magnet-enable');
        }
        autoStartRefresh() {
            const content = this.shadowRoot.querySelector('#container');
            this.querySelector('x-refresh-view > x-refresh-header:first-of-type')?.setAttribute('x-magnet-enable', '');
            this._nextRefreshIsManual = false;
            content.scroll({
                top: 0,
                behavior: 'smooth',
            });
        }
        #getOverScrollContainer = genDomGetter(() => this.shadowRoot, '#container');
        #getContentContainer = genDomGetter(() => this.shadowRoot, '#content');
        get scrollTop() {
            const outer = this.#getOverScrollContainer();
            const inner = this.#getContentContainer();
            return inner.scrollTop + inner.offsetTop - outer.scrollTop;
        }
        set scrollTop(val) {
            console.log(val);
            const outer = this.#getOverScrollContainer();
            const inner = this.#getContentContainer();
            if (val > 0) {
                inner.scrollTop = val;
            }
            else {
                outer.scrollTop = inner.offsetTop + val;
            }
        }
        get scrollHeight() {
            const inner = this.#getContentContainer();
            return inner.scrollHeight;
        }
        get [scrollContainerDom]() {
            return this;
        }
        static {
            __runInitializers(_classThis, _classExtraInitializers);
        }
    };
    return XRefreshView = _classThis;
})();
export { XRefreshView };
//# sourceMappingURL=XRefreshView.js.map