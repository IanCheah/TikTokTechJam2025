import { __esDecorate, __runInitializers, __setFunctionName } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { genDomGetter, registerAttributeHandler, } from '@lynx-js/web-elements-reactive';
import { commonComponentEventSetting } from '../common/commonEventInitConfiguration.js';
import { renameEvent } from '../common/renameEvent.js';
import { registerEventEnableStatusChangeHandler } from '@lynx-js/web-elements-reactive';
let XInputEvents = (() => {
    let _instanceExtraInitializers = [];
    let _private_handleEnableInputEvent_decorators;
    let _private_handleEnableInputEvent_descriptor;
    let _private_handleSendComposingInput_decorators;
    let _private_handleSendComposingInput_descriptor;
    let _private_handleEnableSelectionEvent_decorators;
    let _private_handleEnableSelectionEvent_descriptor;
    return class XInputEvents {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _private_handleEnableInputEvent_decorators = [registerAttributeHandler('input-filter', true), registerEventEnableStatusChangeHandler('lynxinput')];
            _private_handleSendComposingInput_decorators = [registerAttributeHandler('send-composing-input', true)];
            _private_handleEnableSelectionEvent_decorators = [registerEventEnableStatusChangeHandler('selection')];
            __esDecorate(this, _private_handleEnableInputEvent_descriptor = { value: __setFunctionName(function (status) {
                    const input = this.#getInputElement();
                    if (status) {
                        input.addEventListener('input', this.#teleportInput, { passive: true });
                        input.addEventListener('compositionend', this.#teleportCompositionendInput, { passive: true });
                    }
                    else {
                        input.removeEventListener('input', this.#teleportInput);
                        input.removeEventListener('compositionend', this.#teleportCompositionendInput);
                    }
                }, "#handleEnableInputEvent") }, _private_handleEnableInputEvent_decorators, { kind: "method", name: "#handleEnableInputEvent", static: false, private: true, access: { has: obj => #handleEnableInputEvent in obj, get: obj => obj.#handleEnableInputEvent }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, _private_handleSendComposingInput_descriptor = { value: __setFunctionName(function (newVal) {
                    this.#sendComposingInput = newVal !== null;
                }, "#handleSendComposingInput") }, _private_handleSendComposingInput_decorators, { kind: "method", name: "#handleSendComposingInput", static: false, private: true, access: { has: obj => #handleSendComposingInput in obj, get: obj => obj.#handleSendComposingInput }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, _private_handleEnableSelectionEvent_descriptor = { value: __setFunctionName(function (status) {
                    if (status) {
                        this.#getInputElement().addEventListener('select', this.#selectEvent, {
                            passive: true,
                        });
                    }
                    else {
                        this.#getInputElement().removeEventListener('select', this.#selectEvent);
                    }
                }, "#handleEnableSelectionEvent") }, _private_handleEnableSelectionEvent_decorators, { kind: "method", name: "#handleEnableSelectionEvent", static: false, private: true, access: { has: obj => #handleEnableSelectionEvent in obj, get: obj => obj.#handleEnableSelectionEvent }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static observedAttributes = ['send-composing-input', 'input-filter'];
        #dom = __runInitializers(this, _instanceExtraInitializers);
        #sendComposingInput = false;
        #getInputElement = genDomGetter(() => this.#dom.shadowRoot, '#input');
        #getFormElement = genDomGetter(() => this.#dom.shadowRoot, '#form');
        get #handleEnableInputEvent() { return _private_handleEnableInputEvent_descriptor.value; }
        get #handleSendComposingInput() { return _private_handleSendComposingInput_descriptor.value; }
        #teleportEvent = (event) => {
            const eventType = renameEvent[event.type] ?? event.type;
            this.#dom.dispatchEvent(new CustomEvent(eventType, {
                ...commonComponentEventSetting,
                detail: {
                    value: this.#getInputElement().value,
                },
            }));
        };
        #teleportInput = (event) => {
            const input = this.#getInputElement();
            const inputFilter = this.#dom.getAttribute('input-filter');
            const filterValue = inputFilter
                ? input.value.replace(new RegExp(inputFilter, 'g'), '')
                : input.value;
            const isComposing = event.isComposing;
            input.value = filterValue;
            if (isComposing && !this.#sendComposingInput)
                return;
            this.#dom.dispatchEvent(new CustomEvent('lynxinput', {
                ...commonComponentEventSetting,
                detail: {
                    value: filterValue,
                    /** @deprecated */
                    textLength: filterValue.length,
                    /** @deprecated */
                    cursor: input.selectionStart,
                    isComposing,
                    selectionStart: input.selectionStart,
                    selectionEnd: input.selectionEnd,
                },
            }));
        };
        #teleportCompositionendInput = () => {
            const input = this.#getInputElement();
            const inputFilter = this.#dom.getAttribute('input-filter');
            const filterValue = inputFilter
                ? input.value.replace(new RegExp(inputFilter, 'g'), '')
                : input.value;
            input.value = filterValue;
            // if #sendComposingInput set true, #teleportInput will send detail
            if (!this.#sendComposingInput) {
                this.#dom.dispatchEvent(new CustomEvent('lynxinput', {
                    ...commonComponentEventSetting,
                    detail: {
                        value: filterValue,
                        /** @deprecated */
                        textLength: filterValue.length,
                        /** @deprecated */
                        cursor: input.selectionStart,
                        isComposing: false,
                        selectionStart: input.selectionStart,
                        selectionEnd: input.selectionEnd,
                    },
                }));
            }
        };
        get #handleEnableSelectionEvent() { return _private_handleEnableSelectionEvent_descriptor.value; }
        #selectEvent = () => {
            const input = this.#getInputElement();
            this.#dom.dispatchEvent(new CustomEvent('selection', {
                ...commonComponentEventSetting,
                detail: {
                    selectionStart: input.selectionStart,
                    selectionEnd: input.selectionEnd,
                },
            }));
        };
        #blockHtmlEvent = (event) => {
            if (event.target === this.#getInputElement()
                && typeof event.detail === 'number') {
                event.stopImmediatePropagation();
            }
        };
        constructor(dom) {
            this.#dom = dom;
            const inputElement = this.#getInputElement();
            const formElement = this.#getFormElement();
            inputElement.addEventListener('blur', this.#teleportEvent, {
                passive: true,
            });
            inputElement.addEventListener('focus', this.#teleportEvent, {
                passive: true,
            });
            formElement.addEventListener('submit', this.#teleportEvent, {
                passive: true,
            });
            // use form to stop propagation
            formElement.addEventListener('input', this.#blockHtmlEvent, {
                passive: true,
            });
        }
    };
})();
export { XInputEvents };
//# sourceMappingURL=XInputEvents.js.map